<?php

namespace App\Repositories;

use App\Helpers\Helper;
use App\Http\Resources\PubResource;
use App\IRepository\IPubRepository;
use App\Models\Pub;
use App\Models\Pubdimension;
use App\Models\Pubtype;
use App\Traits\DimensionAndType;
use App\Traits\DimensionTypeRubrique;
use Carbon\Carbon;
use Illuminate\Support\Facades\Cache;

class PubRepository extends Repository implements IPubRepository
{
    use DimensionTypeRubrique;
    /**
     * @param $model
     */
    public function __construct(Pub $pub)
    {
        parent::__construct($pub);
    }

    /**
     * @param array $input
     * @return mixed
     */
    function create(array $input)
    {
        $input['endpubdate']=Carbon::parse($input['endpubdate'])->format('Y-m-d H:i:s');
        return parent::create($input);
    }

    /**
     * @param $id
     * @return mixed
     */
    function delete($id)
    {
        return parent::delete($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return mixed
     */
    function findById($id)
    {
        return parent::findById($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $input
     * @param $id
     * @return mixed
     */
    function update(array $input, $id)
    {
        $currentPub = $this->findById($id);
        $input['endpubdate'] = isset($input['endpubdate']) ?
            Carbon::parse($input['endpubdate'])->format('Y-m-d H:i:s') : $currentPub->endpubdate;
        $input['fkdimension'] = $input['fkdimension'] ?? $currentPub->fkdimension;
        $input['fktype'] = $input['fktype'] ?? $currentPub->fktype;
        $input['pub'] = $input['pub'] ?? $currentPub->pub;
        $input['editor'] = $input['editor'] ?? $currentPub->editor;
        $input['href'] = $input['href'] ?? $currentPub->href;
        return parent::update($input, $id);
    }
    /**
     * @return mixed
     */
    function index()
    {
        $cacheKey = "pub-list-cache";
        return Cache::remember($cacheKey, now()->addDay(), function ()  {
            return  PubResource::collection(
                Pub::with(['dimensions','typepubs'])
                ->where('endpubdate','>=', now())
                ->orderBy('endpubdate')
                ->get()
            );
        });

    }

    /**
     * @param $dimension
     * @return mixed
     */
    function getCachedPub($dimension)
    {
        $dim=(int)$dimension;
        $cache=($dim===728)? 'Pub-728':'Pub-300';
        $fkdimension=Helper::getPubDimension($dim);
        //dd($cache);
        $pub=Cache::remember($cache, now()->add(1,'day'), function ()  use($fkdimension) {
            return Pub::with(['dimensions','typepubs'])
                ->where('endpubdate','>=', now())
                ->where('fkdimension',$fkdimension)
                ->select('*')
                ->get();
        });
        return Cache::get($cache)->random();
    }

    /**
     * @return mixed
     */
    function getPubDimension()
    {
        return $this->getPubDimension();
    }

    /**
     * @return mixed
     */
    function getPubType()
    {
        return $this->getPubType();
    }


    /**
     * @return mixed
     */
    function allPubDimension()
    {
        return Pubdimension::orderBy('dimension')->get();
        //return $this->allPubDimension();
    }

    /**
     * @return mixed
     */
    function allPubType()
    {
        return Pubtype:: orderBy('pubtype', 'asc')->get();
    }
}
