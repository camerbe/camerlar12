<?php

namespace App\Repositories;

use App\IRepository\IEvenementRepository;
use App\Models\Evenement;
use Carbon\Carbon;
use Illuminate\Support\Facades\Cache;

class EvenementRepository extends Repository implements IEvenementRepository
{
    /**
     * @param $model
     */
    public function __construct(Evenement $evenement)
    {
        parent::__construct($evenement);
    }

    /**
     * @param array $input
     * @return mixed
     */
    function create(array $input)
    {
        $input['eventdate']=Carbon::parse($input['eventdate'])->format('Y-m-d H:i:s');
        return parent::create($input); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return mixed
     */
    function delete($id)
    {
        return parent::delete($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return mixed
     */
    function findById($id)
    {
        return parent::findById($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $input
     * @param $id
     * @return mixed
     */
    function update(array $input, $id)
    {
        $currentEvent=$this->findById($id);
        $input['eventdate']=isset($input['eventdate'])?
            Carbon::parse($input['eventdate'])->format('Y-m-d H:i:s'):$currentEvent->eventdate;
        $input['affiche']= $input['affiche'] ?? $currentEvent->affiche;
        //dd($input['affiche']);
        return parent::update($input, $id); // TODO: Change the autogenerated stub
    }

    /**
     * @return mixed
     */
    function index()
    {
        return Evenement::orderByDesc('eventdate')->where('eventdate','>=',now())->get();
    }

    /**
     * @return mixed
     */
    function getCachedEvenements()
    {
        return Cache::remember('evenement', now()->add(1,'day'), function () {
            return Evenement::orderByDesc('eventdate')->where('eventdate','>=',now())->get();
        });
    }
}
