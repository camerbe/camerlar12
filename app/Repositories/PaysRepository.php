<?php

namespace App\Repositories;

use App\IRepository\IPaysRepository;
use App\Models\Pays;
use Illuminate\Support\Facades\Cache;

class PaysRepository extends Repository implements IPaysRepository
{
    /**
     * @param $model
     */
    public function __construct(Pays $pays)
    {
        parent::__construct($pays);
    }

    /**
     * @param array $input
     * @return mixed
     */
    function create(array $input)
    {
        $input['idpays']=strtoupper($input['idpays']);
        $input['pays']=strtoupper($input['pays']);
        $input['country']=strtoupper($input['country']);
        return parent::create($input);
    }

    /**
     * @param $id
     * @return mixed
     */
    function delete($id)
    {
        return parent::delete($id);
    }

    /**
     * @param $id
     * @return mixed
     */
    function findById($id)
    {
        return parent::findById($id);
    }

    /**
     * @param array $input
     * @param $id
     * @return mixed
     */
    function update(array $input, $id)
    {
        $current=$this->findById($id);
        $input['idpays']=isset( $input['idpays'])?  strtoupper($input['idpays']):$current->idpays;
        $input['pays']=isset( $input['pays'])?  strtoupper($input['pays']):$current->pays;
        $input['country']=isset( $input['country'])?  strtoupper($input['country']):$current->country;
        return parent::update($input, $id); // TODO: Change the autogenerated stub
    }

    /**
     * @return mixed
     */
    function index()
    {
        $cacheKey = "country-cache";
        return Cache::remember($cacheKey, now()->addDay(), function ()  {
            return Pays::orderBy('pays','asc')->get();
        });

    }

    /**
     * @return mixed
     */
    function allPays()
    {
        return $this->index();
    }

    /**
     * @return mixed
     */
    function articleNonCameroon()
    {
        return Pays::where('idpays', '<>', 'CM')
            ->whereHas('articles', function ($query) {
                $query->where('dateparution', '<=', now());
            })
            ->with(['articles' => function ($query) {
                $query->where('dateparution', '<=', now())
                    ->orderByDesc('dateparution')
                    ->limit(100);
            }])
            ->get();

    }

    /**
     * @return mixed
     */
    function articleCameroon()
    {
        return  Pays::where('idpays','CM')
        ->whereHas('articles', function ($query) {
            $query->where('dateparution', '<=', now());
        })
        ->with(['articles' => function ($query) {
            $query->where('dateparution', '<=', now())
                ->orderByDesc('dateparution')
                ->limit(100);
        }])
        ->get();
    }
}
